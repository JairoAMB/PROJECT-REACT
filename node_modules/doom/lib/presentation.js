(function(){
  var ref$, map, each, isArray, getComputedStyle, makeClassRe, normaliseClasses, style, style1, computedStyle, computedStyle1, setStyle, classes, addClass, removeClass, hasClass, toggleClass, specifyClassState;
  ref$ = require('./collection'), map = ref$.map, each = ref$.each;
  isArray = Array.isArray;
  getComputedStyle = (function(e){
    switch (false) {
    case !('currentStyle' in e):
      return function(it){
        return it.currentStyle;
      };
    default:
      return function(it, state){
        return it.ownerDocument.defaultView.getComputedStyle(it, state);
      };
    }
  }.call(this, document.createElement('div')));
  makeClassRe = function(name){
    var escape;
    escape = function(re){
      return re.trim().replace(/([^\w\s])/g, '\\$1').replace(/\s+/, '|');
    };
    return new RegExp("\\s*\\b(" + escape(normaliseClasses(name)) + ")\\b\\s*", 'gi');
  };
  normaliseClasses = function(it){
    switch (false) {
    case !isArray(it):
      return it.join(' ');
    default:
      return String(it);
    }
  };
  style = curry$(function(name, xs){
    return map(function(it){
      return it.style[name];
    })(
    xs);
  });
  style1 = curry$(function(name, node){
    return head(node).style[name];
  });
  computedStyle = curry$(function(name, xs){
    return map(function(it){
      return getComputedStyle(it)[name];
    })(
    xs);
  });
  computedStyle1 = curry$(function(name, node){
    return getComputedStyle(head(node))[name];
  });
  setStyle = curry$(function(name, value, xs){
    return each(function(it){
      return it.style[name] = value;
    })(
    xs);
  });
  classes = map(function(it){
    return it.className.trim().split(/\s+/);
  });
  addClass = curry$(function(name, xs){
    return each(function(it){
      removeClass(name, it);
      return it.className += " " + normaliseClasses(name);
    })(
    xs);
  });
  removeClass = curry$(function(name, xs){
    var re;
    re = makeClassRe(name);
    return each(function(it){
      return it.className = it.className.replace(re, '');
    })(
    xs);
  });
  hasClass = curry$(function(name, xs){
    var re;
    re = makeClassRe(name);
    return map(function(it){
      return re.test(it.className);
    })(
    xs);
  });
  toggleClass = curry$(function(name, xs){
    var has;
    has = hasClass(name);
    return each(function(it){
      switch (false) {
      case !has(it)[0]:
        return removeClass(name, it);
      default:
        return addClass(name, it);
      }
    })(
    xs);
  });
  specifyClassState = curry$(function(name, shouldAdd, xs){
    return each(function(it){
      switch (false) {
      case !shouldAdd:
        return addClass(name, it);
      default:
        return removeClass(name, it);
      }
    })(
    xs);
  });
  module.exports = {
    style: style,
    style1: style1,
    computedStyle: computedStyle,
    computedStyle1: computedStyle1,
    setStyle: setStyle,
    classes: classes,
    addClass: addClass,
    removeClass: removeClass,
    hasClass: hasClass,
    toggleClass: toggleClass,
    specifyClassState: specifyClassState
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
