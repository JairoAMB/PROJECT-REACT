(function(){
  module.exports = function(engine){
    var ref$, query, matches, map, concat, mapConcat, nextSibling, previousSibling, firstSteppingWith, collectSteppingWith, nextSiblingMatching, previousSiblingMatching, parentMatching, allParentsMatching, next, previous, siblings, parent, parents, children;
    ref$ = require('./query')(engine), query = ref$.query, matches = ref$.matches;
    ref$ = require('./collection'), map = ref$.map, concat = ref$.concat, mapConcat = ref$.mapConcat;
    nextSibling = function(x){
      return x.nextElementSibling || x.nextSibling;
    };
    previousSibling = function(x){
      return x.previousElementSibling || x.previousSibling;
    };
    firstSteppingWith = curry$(function(stepper, selector, x){
      do {
        if (x) {
          x = stepper(x);
        }
      } while (!(x && matches(selector, x)));
      return x;
    });
    collectSteppingWith = curry$(function(stepper, selector, x){
      var y, results$ = [];
      while (x) {
        if (x && matches(selector, x)) {
          y = x;
          x = stepper(x);
          results$.push(y);
        }
      }
      return results$;
    });
    nextSiblingMatching = firstSteppingWith(nextSibling);
    previousSiblingMatching = firstSteppingWith(previousSibling);
    parentMatching = firstSteppingWith(function(it){
      return it.parentNode;
    });
    allParentsMatching = collectSteppingWith(function(it){
      return it.parentNode;
    });
    next = curry$(function(selector, xs){
      return map(nextSiblingMatching(selector))(
      xs);
    });
    previous = curry$(function(selector, xs){
      return map(previousSiblingMatching(selector))(
      xs);
    });
    siblings = curry$(function(selector, xs){
      return concat(next(selector, xs), previous(selector, xs));
    });
    parent = curry$(function(selector, xs){
      return map(parentMatching(selector))(
      xs);
    });
    parents = curry$(function(selector, xs){
      return mapConcat(allParentsMatching(selector))(
      xs);
    });
    children = curry$(function(selector, xs){
      return mapConcat(function(it){
        return query(selector, it);
      })(
      xs);
    });
    return {
      next: next,
      previous: previous,
      siblings: siblings,
      parent: parent,
      parents: parents,
      children: children
    };
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
