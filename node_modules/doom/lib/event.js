(function(){
  module.exports = function(event, engine){
    var each, matches, e, has, isCallable, isElement, findTarget, source, asFilter, w3cListen, w3cRemove, ieListen, ieRemove, listen, delegate, deafen;
    each = require('./collection').each;
    matches = require('./query')(engine).matches;
    e = document.createElement('div');
    has = function(key){
      return key in e;
    };
    isCallable = function(a){
      return typeof a === 'function';
    };
    isElement = function(a){
      return (a != null ? a.nodeType : void 8) === 1;
    };
    findTarget = curry$(function(selector, parent, x){
      while (x && x !== parent) {
        if (isElement(x) && matches(selector, x)) {
          return x;
        }
        x = x.parentNode;
      }
    });
    source = function(ev){
      return ev.target || ev.srcElement;
    };
    asFilter = function(current, filter){
      switch (false) {
      case !isCallable(filter):
        return function(ev){
          return filter.call(this, current, ev);
        };
      default:
        return function(ev){
          return findTarget(filter, current, source(ev));
        };
      }
    };
    w3cListen = curry$(function(event, handler, xs){
      return each(function(it){
        return it.addEventListener(event, handler, false);
      })(
      xs);
    });
    w3cRemove = curry$(function(event, handler, xs){
      return each(function(it){
        return it.removeEventListener(event, handler, false);
      })(
      xs);
    });
    ieListen = curry$(function(event, handler, xs){
      return each(function(it){
        return it.attachEvent("on" + event, handler);
      })(
      xs);
    });
    ieRemove = curry$(function(event, handler, xs){
      return each(function(it){
        return it.detachEvent("on" + event, handler);
      })(
      xs);
    });
    listen = (function(){
      switch (false) {
      case !has('addEventListener'):
        return w3cListen;
      default:
        return ieListen;
      }
    }());
    delegate = curry$(function(filter, event, handler, xs){
      return listen(event, function(ev){
        var current, element;
        current = ev.currentTarget || this;
        element = asFilter(current, filter)(ev);
        if (element) {
          return handler.call(this, ev, element);
        }
      })(
      xs);
    });
    deafen = (function(){
      switch (false) {
      case !has('removeEventListener'):
        return w3cRemove;
      default:
        return ieRemove;
      }
    }());
    switch (false) {
    case !event:
      return event.delegate = delegate, event;
    default:
      return {
        listen: listen,
        delegate: delegate,
        deafen: deafen
      };
    }
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
