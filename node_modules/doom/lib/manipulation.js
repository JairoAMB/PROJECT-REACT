(function(){
  var ref$, map, each, head, tail, asCollection, append, prepend, insertBefore, insertAfter, remove, detach, replace, wrap, clear, shallowClone, clone;
  ref$ = require('./collection'), map = ref$.map, each = ref$.each, head = ref$.head, tail = ref$.tail, asCollection = ref$.asCollection;
  append = curry$(function(parent, xs){
    return each(function(it){
      return parent.appendChild(it);
    })(
    xs);
  });
  prepend = curry$(function(parent, xs){
    return each(function(it){
      switch (false) {
      case !parent.firstChild:
        return insertBefore(parent.firstChild, it);
      default:
        return parent.appendChild(it);
      }
    })(
    xs);
  });
  insertBefore = curry$(function(x, xs){
    return each(function(it){
      return x.parentNode.insertBefore(it, x);
    })(
    xs);
  });
  insertAfter = curry$(function(x, xs){
    return each(function(it){
      return x.parentNode.insertBefore(it, x.nextSibling);
    })(
    xs);
  });
  remove = curry$(function(parent, xs){
    return each(function(it){
      return parent.removeChild(it);
    })(
    xs);
  });
  detach = each(function(it){
    return it.parentNode.removeChild(it);
  });
  replace = curry$(function(node, xs){
    xs = asCollection(xs);
    node.parentNode.replaceChild(head(xs), node);
    insertAfter(head(xs), tail(xs));
    return xs;
  });
  wrap = curry$(function(node, x){
    insertBefore(node, x);
    return x.appendChild(node);
  });
  clear = each(function(it){
    while (it.firstChild) {
      it.removeChild(it.firstChild);
    }
  });
  shallowClone = curry$(function(xs){
    return map(function(it){
      return it.cloneNode(false);
    })(
    xs);
  });
  clone = curry$(function(xs){
    return map(function(it){
      return it.cloneNode(true);
    })(
    xs);
  });
  module.exports = {
    append: append,
    prepend: prepend,
    insertBefore: insertBefore,
    insertAfter: insertAfter,
    remove: remove,
    detach: detach,
    replace: replace,
    clear: clear,
    wrap: wrap,
    clone: clone,
    shallowClone: shallowClone
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
