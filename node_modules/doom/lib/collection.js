(function(){
  var toArray, isCollection, head, tail, last, asCollection, each, map, reduce, concat, mapConcat, slice$ = [].slice;
  toArray = function(xs){
    var i$, len$, x, results$ = [];
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x = xs[i$];
      results$.push(x);
    }
    return results$;
  };
  isCollection = function(a){
    return a && !a.nodeType && a.length >= 0;
  };
  head = function(xs){
    return asCollection(xs)[0];
  };
  tail = function(xs){
    var i$, ref$, len$, i, x, results$ = [];
    for (i$ = 0, len$ = (ref$ = asCollection(xs)).length; i$ < len$; ++i$) {
      i = i$;
      x = ref$[i$];
      if (i > 0) {
        results$.push(x);
      }
    }
    return results$;
  };
  last = function(xs){
    var ref$;
    return (ref$ = asCollection(xs))[ref$.length - 1];
  };
  asCollection = function(x){
    switch (false) {
    case !isCollection(x):
      return x;
    default:
      return [x];
    }
  };
  each = curry$(function(f, xs){
    var ys, i$, len$, i, x;
    ys = asCollection(xs);
    for (i$ = 0, len$ = ys.length; i$ < len$; ++i$) {
      i = i$;
      x = ys[i$];
      f(x);
    }
    return ys;
  });
  map = curry$(function(f, xs){
    var i$, ref$, len$, x, results$ = [];
    for (i$ = 0, len$ = (ref$ = asCollection(xs)).length; i$ < len$; ++i$) {
      x = ref$[i$];
      results$.push(f(x));
    }
    return results$;
  });
  reduce = curry$(function(f, initial, xs){
    var result, i$, ref$, len$, x;
    result = initial;
    for (i$ = 0, len$ = (ref$ = asCollection(xs)).length; i$ < len$; ++i$) {
      x = ref$[i$];
      result = f(result, x);
    }
    return result;
  });
  concat = function(){
    var xs, append;
    xs = slice$.call(arguments);
    append = function(ys, a){
      ys.push.apply(ys, a);
      return ys;
    };
    return reduce(append, [], asCollection(xs));
  };
  mapConcat = curry$(function(f, xs){
    var flatTransform;
    flatTransform = function(ys, a){
      ys.push.apply(ys, f(a));
      return ys;
    };
    return reduce(flatTransform, [], asCollection(xs));
  });
  module.exports = {
    toArray: toArray,
    head: head,
    tail: tail,
    last: last,
    asCollection: asCollection,
    map: map,
    each: each,
    reduce: reduce,
    concat: concat,
    mapConcat: mapConcat
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
