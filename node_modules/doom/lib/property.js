(function(){
  var ref$, head, each, map, toArray, TEXT, attributes, attribute, attribute1, setAttribute, text, text1, setText, html, html1, setHtml;
  ref$ = require('./collection'), head = ref$.head, each = ref$.each, map = ref$.map, toArray = ref$.toArray;
  TEXT = (function(e){
    switch (false) {
    case !('innerText' in e):
      return 'innerText';
    default:
      return 'textContent';
    }
  }.call(this, document.createElement('div')));
  attributes = map(function(it){
    return toArray(it.attributes);
  });
  attribute = curry$(function(name, xs){
    return map(function(it){
      return it.getAttribute(name);
    })(
    xs);
  });
  attribute1 = curry$(function(name, node){
    return head(node).getAttribute(name);
  });
  setAttribute = curry$(function(name, value, xs){
    return each(function(it){
      switch (false) {
      case !deepEq$(value, null, '==='):
        return it.removeAttribute(name);
      default:
        return it.setAttribute(name, value);
      }
    })(
    xs);
  });
  text = map(function(it){
    return it[TEXT];
  });
  text1 = function(node){
    return head(node)[TEXT];
  };
  setText = curry$(function(value, xs){
    return each(function(it){
      return it[TEXT] = value;
    })(
    xs);
  });
  html = map(function(it){
    return it.innerHTML;
  });
  html1 = function(node){
    return head(node).innerHTML;
  };
  setHtml = curry$(function(value, xs){
    return each(function(it){
      return it.innerHTML = value;
    })(
    xs);
  });
  module.exports = {
    attributes: attributes,
    attribute: attribute,
    attribute1: attribute1,
    setAttribute: setAttribute,
    text: text,
    text1: text1,
    setText: setText,
    html: html,
    html1: html1,
    setHtml: setHtml
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
  function deepEq$(x, y, type){
    var toString = {}.toString, hasOwnProperty = {}.hasOwnProperty,
        has = function (obj, key) { return hasOwnProperty.call(obj, key); };
    first = true;
    return eq(x, y, []);
    function eq(a, b, stack) {
      var className, length, size, result, alength, blength, r, key, ref, sizeB;
      if (a == null || b == null) { return a === b; }
      if (a.__placeholder__ || b.__placeholder__) { return true; }
      if (a === b) { return a !== 0 || 1 / a == 1 / b; }
      className = toString.call(a);
      if (toString.call(b) != className) { return false; }
      switch (className) {
        case '[object String]': return a == String(b);
        case '[object Number]':
          return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
        case '[object Date]':
        case '[object Boolean]':
          return +a == +b;
        case '[object RegExp]':
          return a.source == b.source &&
                 a.global == b.global &&
                 a.multiline == b.multiline &&
                 a.ignoreCase == b.ignoreCase;
      }
      if (typeof a != 'object' || typeof b != 'object') { return false; }
      length = stack.length;
      while (length--) { if (stack[length] == a) { return true; } }
      stack.push(a);
      size = 0;
      result = true;
      if (className == '[object Array]') {
        alength = a.length;
        blength = b.length;
        if (first) { 
          switch (type) {
          case '===': result = alength === blength; break;
          case '<==': result = alength <= blength; break;
          case '<<=': result = alength < blength; break;
          }
          size = alength;
          first = false;
        } else {
          result = alength === blength;
          size = alength;
        }
        if (result) {
          while (size--) {
            if (!(result = size in a == size in b && eq(a[size], b[size], stack))){ break; }
          }
        }
      } else {
        if ('constructor' in a != 'constructor' in b || a.constructor != b.constructor) {
          return false;
        }
        for (key in a) {
          if (has(a, key)) {
            size++;
            if (!(result = has(b, key) && eq(a[key], b[key], stack))) { break; }
          }
        }
        if (result) {
          sizeB = 0;
          for (key in b) {
            if (has(b, key)) { ++sizeB; }
          }
          if (first) {
            if (type === '<<=') {
              result = size < sizeB;
            } else if (type === '<==') {
              result = size <= sizeB
            } else {
              result = size === sizeB;
            }
          } else {
            first = false;
            result = size === sizeB;
          }
        }
      }
      stack.pop();
      return result;
    }
  }
}).call(this);
